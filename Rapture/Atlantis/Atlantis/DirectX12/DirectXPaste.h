#pragma once

#include <d3d12.h>
#include <DirectXmath.h>

#define USING_GLUE using namespace ATLANTIS_NAMESPACE::Glue;

ATLANTIS_NAMESPACE_BEGIN

// DirectXì¡óLÇÃÇ‡ÇÃÇ©ÇÁó\ÇﬂíËã`ÇµÇΩÇ‡ÇÃÇ…íuÇ´ä∑Ç¶ÇƒÇ¢Ç≠
namespace Glue
{

	enum ECommandListType : uint8
	{
		COMMAND_LIST_TYPE_DIRECT = 0,
		COMMAND_LIST_TYPE_BUNDLE = 1,
		COMMAND_LIST_TYPE_COMPUTE = 2,
		COMMAND_LIST_TYPE_COPY = 3,
		COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
		COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
		COMMAND_LIST_TYPE_VIDEO_ENCODE = 6
	};

	const D3D12_COMMAND_LIST_TYPE GetD3DCommandListType(ECommandListType _ListType);

	enum ECommandQueueFlag : uint8
	{
		COMMAND_QUEUE_FLAG_NONE = 0,
		COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1
	};

	const D3D12_COMMAND_QUEUE_FLAGS GetD3DCommandQueueFlag(ECommandQueueFlag _Flag);

	enum ECommandQueuePriority : uint32
	{
		COMMAND_QUEUE_PRIORITY_NORMAL = 0,
		COMMAND_QUEUE_PRIORITY_HIGH = 100,
		COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000
	};

	const D3D12_COMMAND_QUEUE_PRIORITY GetD3DCommandQueuePriority(ECommandQueuePriority _Priority);

	enum ERootSignatureFlag : uint16
	{
		ROOT_SIGNATURE_FLAG_NONE = 0,
		ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
		ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
		ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
		ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
		ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
		ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
		ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 0x40,
		ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 0x80,
		ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 0x100,
		ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 0x200
	};

	const D3D12_ROOT_SIGNATURE_FLAGS GetD3DRootSignatureFlag(ERootSignatureFlag _Flag);

	enum EResourceBarrierType : uint8
	{
		BARRIER_TYPE_TRANSITION = 0,
		BARRIER_TYPE_ALIASING = (BARRIER_TYPE_TRANSITION + 1),
		BARRIER_TYPE_UAV = (BARRIER_TYPE_ALIASING + 1)
	};

	const D3D12_RESOURCE_BARRIER_TYPE GetD3DResourceBarrierType(EResourceBarrierType _Type);

	enum EResourceState : uint32
	{
		RESOURCE_STATE_COMMON = 0,
		RESOURCE_STATE_PRESENT = RESOURCE_STATE_COMMON,

		RESOURCE_STATE_RENDER_TARGET = 0x4,
	};

	const D3D12_RESOURCE_STATES GetD3DResourceState(EResourceState _state);

};



// éZèpââéZån
namespace Glue
{

	typedef DirectX::XMFLOAT2 Vector2;
	typedef DirectX::XMFLOAT3 Vector3;
	typedef DirectX::XMFLOAT4 Vector4;


	typedef DirectX::XMFLOAT3X4 Matrix34;
	typedef DirectX::XMFLOAT4X3 Matrix43;
	typedef DirectX::XMFLOAT4X4 Matrix44;

	typedef DirectX::XMVECTOR FVector;
	typedef DirectX::XMMATRIX FMatrix;

};


ATLANTIS_NAMESPACE_END